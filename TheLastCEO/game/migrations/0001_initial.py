# Generated by Django 4.2.7 on 2025-07-17 10:43

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(max_length=30, unique=True)),
                ('balance', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('avatar_color', models.CharField(default='#FF6B6B', max_length=7)),
                ('avatar_pattern', models.CharField(default='solid', max_length=20)),
                ('total_games_played', models.IntegerField(default=0)),
                ('total_games_won', models.IntegerField(default=0)),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='GameSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('status', models.CharField(choices=[('waiting', 'Waiting for Players'), ('lobby', 'In Lobby'), ('quiz', 'Quiz Stage'), ('red_light', 'Red Light Green Light'), ('honeycomb', 'Honeycomb Stage'), ('freedom_room', 'Freedom Room'), ('finished', 'Finished')], default='waiting', max_length=20)),
                ('max_players', models.IntegerField(default=80)),
                ('entry_fee', models.DecimalField(decimal_places=2, default=200000, max_digits=12)),
                ('prize_pool', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('current_stage', models.IntegerField(default=0)),
                ('stage_start_time', models.DateTimeField(blank=True, null=True)),
                ('stage_duration', models.IntegerField(default=30)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='HoneycombShape',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shape_type', models.CharField(choices=[('circle', 'Circle'), ('triangle', 'Triangle'), ('square', 'Square'), ('star', 'Star'), ('heart', 'Heart')], max_length=20)),
                ('svg_path', models.TextField()),
                ('tolerance', models.FloatField(default=0.1)),
                ('time_limit', models.IntegerField(default=120)),
                ('difficulty', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_number', models.IntegerField()),
                ('is_alive', models.BooleanField(default=True)),
                ('elimination_stage', models.IntegerField(blank=True, null=True)),
                ('position_x', models.FloatField(default=0)),
                ('position_y', models.FloatField(default=0)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('eliminated_at', models.DateTimeField(blank=True, null=True)),
                ('final_prize', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='game.gamesession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_participations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('session', 'user')},
            },
        ),
        migrations.CreateModel(
            name='QuizQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('option_a', models.CharField(max_length=200)),
                ('option_b', models.CharField(max_length=200)),
                ('option_c', models.CharField(max_length=200)),
                ('option_d', models.CharField(max_length=200)),
                ('correct_answer', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D')], max_length=1)),
                ('difficulty', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('category', models.CharField(default='general', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='RedLightMovement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_x', models.FloatField()),
                ('from_y', models.FloatField()),
                ('to_x', models.FloatField()),
                ('to_y', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_during_red_light', models.BooleanField(default=False)),
                ('eliminated', models.BooleanField(default=False)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='movements', to='game.player')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.gamesession')),
            ],
        ),
        migrations.CreateModel(
            name='QuizAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D')], max_length=1)),
                ('is_correct', models.BooleanField()),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('time_taken', models.FloatField()),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_answers', to='game.player')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.quizquestion')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.gamesession')),
            ],
        ),
        migrations.CreateModel(
            name='Purchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_type', models.CharField(choices=[('color', 'Avatar Color'), ('pattern', 'Avatar Pattern')], max_length=20)),
                ('item_value', models.CharField(max_length=50)),
                ('cost', models.DecimalField(decimal_places=2, max_digits=12)),
                ('purchased_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HoneycombAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('drawing_data', models.JSONField()),
                ('accuracy_score', models.FloatField()),
                ('success', models.BooleanField()),
                ('completed_at', models.DateTimeField(auto_now_add=True)),
                ('time_taken', models.FloatField()),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='honeycomb_attempts', to='game.player')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.gamesession')),
                ('shape', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.honeycombshape')),
            ],
        ),
        migrations.CreateModel(
            name='GameStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_players', models.IntegerField()),
                ('quiz_eliminations', models.IntegerField(default=0)),
                ('red_light_eliminations', models.IntegerField(default=0)),
                ('honeycomb_eliminations', models.IntegerField(default=0)),
                ('winners_count', models.IntegerField(default=0)),
                ('total_prize_distributed', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('average_survival_time', models.FloatField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='statistics', to='game.gamesession')),
            ],
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(max_length=500)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_system_message', models.BooleanField(default=False)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.player')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_messages', to='game.gamesession')),
            ],
        ),
    ]
